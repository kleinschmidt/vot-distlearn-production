#!/usr/bin/env python

#    Author: Andrew Watts
#
#    Copyright 2010 Andrew Watts and the University of Rochester
#    BCS Department
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License version
#    2.1 as published by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with this program.
#    If not, see <http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html>.

"""
Pays out bonuses to Amazon Mechanical Turk workers based on 'bonus.<expt_name>.csv'
as generated by calculate_bonus.py
"""

import csv
import argparse

from boto.mturk.connection import MTurkConnection
from boto.mturk.price import Price
from boto.exception import AWSConnectionError, EC2ResponseError

parser = argparse.ArgumentParser(description='Grant bonuses for HITs on Amazon Mechanical Turk')
parser.add_argument('-experiment', required=True, help='(required) The name of the experiment you are granting bonuses for')
args = parser.parse_args()

try:
    conn = MTurkConnection(is_secure=True)
    mtbal = conn.get_account_balance()
    if len(mtbal) == 1:
        print "Available balance: ", mtbal[0]
    elif len(mtbal) == 2:
        print "Available balance: ", mtbal[0]
        print "OnHold balance: ", mtbal[1]
    avbal = mtbal[0]

    #if (bonuscost > avbal.amount):
    #    print "Insufficient funds to pay bonuses! Add $%.2f to your account before proceeding" % (bonuscost - avbal.amount)
    #else:
    with open('bonus.' + args.expt_name + '.csv', 'r') as csvinfile:
        fields = ('worker', 'trials', 'bonus', 'assignment')
        bonuses = csv.DictReader(csvinfile, fieldnames=fields)
        bonuses.next() # pop off the header row
        for row in bonuses:
            price = Price(amount=row['bonus'])
            worker_id = row['worker']
            assignment_id = row['assignment']
            trial_count  = row['trials']
            print "Paying ${0} bonus to {1} for {2} trials including {3}".format(price, worker_id, trial_count, assignment_id)
            try:
                #conn.grant_bonus(worker_id, assignment_id, price, "For doing {0} HITs".format(trial_count))
                conn.grant_bonus(worker_id, assignment_id, price, "For doing {0} trials".format(trial_count))
            except EC2ResponseError as e:
                print ("Error!\n\tStatus: %s\n\tReason: %s\n\tBody: %s") % (e.status, e.reason, e.body)
except AWSConnectionError as reason:
    print "Connection problem: ", reason
    import sys
    sys.exit()
